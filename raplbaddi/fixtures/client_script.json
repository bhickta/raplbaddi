[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "IssueRapl",
  "enabled": 0,
  "modified": "2023-06-23 10:56:23.877352",
  "module": "SupportRapl",
  "name": "Issue resolve amount",
  "script": "function calculation(frm) {\n    let sc = frm.doc.service_centre;\n    if (sc) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Service Centre',\n                name: sc\n            },\n            callback: function(response) {\n                let kilometerCategory = parseInt(response.message.kilometer_category);\n                let fixedRate = parseInt(response.message.fixed_rate);\n                let perKilometerRate = parseInt(response.message.per_kilometer_rate);\n                let kilometerTravelled = parseInt(frm.doc.kilometer);\n                let amount;\n                if (kilometerTravelled < kilometerCategory) {\n                    amount = fixedRate;\n                } else {\n                    amount = fixedRate + (kilometerTravelled - kilometerCategory) * perKilometerRate;\n                }\n                frm.set_value('amount', amount);\n            }\n        });\n    }\n}\n\nfunction feedback(frm){\n    let feedback = frm.doc.customer_confirmation\n    if(feedback == \"Positive\"){\n        frm.set_value('status', 'Closed')\n    }else{\n        frm.set_value('status', 'Open')\n    }\n}\n\nfunction coolerCapacity(frm){\n    frm.toggle_display(['model', 'capacity'], frm.doc.product == 'Geyser');\n    frm.toggle_display(['cooler_model'], frm.doc.product == 'Desert Air Cooler');\n    \n    if(frm.doc.product == 'Geyser'){\n        frm.set_value('cooler_model', '-')\n        frm.set_value('brand_name', '')\n    }else{\n        frm.set_value('model', '-')\n        frm.set_value('capacity', '00')\n        frm.set_value('brand_name', '')\n    }\n}\n\nfunction offCooler(frm){\n    frm.toggle_display(['cooler_model'])\n}\n\nfrappe.ui.form.on('IssueRapl', {\n    setup: offCooler,\n    service_centre: calculation,\n    kilometer: calculation,\n    customer_confirmation: feedback,\n    product: coolerCapacity\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Daily Production Entry",
  "enabled": 1,
  "modified": "2023-05-25 18:42:56.669947",
  "module": "Production Rapl",
  "name": "Daily production rapl",
  "script": "frappe.ui.form.on('Daily Production Entry', {\n    refresh(frm) {\n        if (frm.is_new()){\n            populate(frm)\n        }\n      filter(frm)\n    },\n    item(frm){\n        if(frm.doc.item!==\"Geyser\"){\n            frm.remove_custom_button('Populate');\n        } else {\n            populate(frm)\n        }\n    },\n    date_of_production(frm){\n        let date = new Date(frm.doc.date_of_production);\n        let monthOfProduction = dop(date);\n        frm.set_value('month_prefix', monthOfProduction)\n    }, \n    total_quantity(frm){\n        element_not_tested(frm)\n    },\n});\n\nfunction filter(frm){\n    frm.set_query(\"element_type\", function() {\n        return {\n            \"filters\": {\n                \"item_group\": \"Element Unit\",\n            }\n    }\n}\n)}\n\n// function element_not_tested(frm){\n//     let f = frm.doc;\n//     frm.set_value('element_not_tested', f.total_quantity - f.element_tested)\n// }\n\nfunction populate(frm){\n    frm.add_custom_button('Populate', () => {\n        populateChildTable(frm);\n    });\n}\n\nfunction dop(date) {\n    const month = date.getMonth() + 1; // Adding 1 because getMonth() returns zero-based month (0-11)\n\n    switch (month) {\n        case 1:\n            return 'A';\n        case 2:\n            return 'B';\n        case 3:\n            return 'C';\n        case 4:\n            return 'D';\n        case 5:\n            return 'E';\n        case 6:\n            return 'F';\n        case 7:\n            return 'G';\n        case 8:\n            return 'H';\n        case 9:\n            return 'I';\n        case 10:\n            return 'J';\n        case 11:\n            return 'K';\n        case 12:\n            return 'L';\n        default:\n            return '';\n    }\n}\n\nfunction addDailyItem(frm, i) {\n    let f = frm.doc;\n    let s = \" \";\n    let serialPrefix = \"000000\";\n    let serialLength = 6;\n    \n    let serialNo = (serialPrefix + i).slice(-serialLength);\n    \n    let row = frm.add_child('daily_production_item', {\n        item_name: f.brand_name + s + f.capacity + \" Litre\" + s + f.model_name,\n        serial_no: '3' + serialNo\n    });\n}\n\nfunction populateChildTable(frm) {\n    let f = frm.doc;\n    frm.clear_table('daily_production_item');\n    \n    for (let i = f.from; i <= f.to; i++) {\n        addDailyItem(frm, i);\n    }\n    frm.set_value('total_quantity', 1 + (f.to - f.from))\n    \n    frm.refresh_field('daily_production_item');\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Centre",
  "enabled": 0,
  "modified": "2023-05-06 11:29:36.212215",
  "module": null,
  "name": "User permission service centre",
  "script": "frappe.listview_settings['Service Centre'] = {\n    onload: function(listview) {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Service Centre',\n                fields: ['user', 'name'],\n                limit: 100\n            },\n            callback: function(response) {\n                console.log(response.message);\n                for (var i = 0; i < response.message.length; i++) {\n                    console.log(response.message[i].user + \": \" + response.message[i].name);\n                }\n            }\n        });\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Warranty Check",
  "enabled": 1,
  "modified": "2023-05-06 16:56:50.359596",
  "module": null,
  "name": "Warranty Check",
  "script": "frappe.ui.form.on('Warranty Check', {\n\trefresh(frm){\n        frm.add_custom_button(__('Check Warranty'), function(){\n            let sn = frm.doc.serial_no;\n            console.log(sn)\n            frappe.db.count('Daily Production Item', {'serial_no': sn}).then((r)=>console.log(r))\n        });\n\t} \n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "IssueRapl",
  "enabled": 0,
  "modified": "2023-05-07 11:28:58.993311",
  "module": null,
  "name": "Make Se of Spare",
  "script": "frappe.ui.form.on('IssueRapl', {\n\trefresh(frm) {\n\t    if(frm.doc.status =='Closed'){\n\t\t    frm.add_custom_button(__('Stock Entry'), ()=> {})\n\t    }\n\t}\n})\n\nfunction items(frm) {\n    let spare_list = {};\n    let spare = frm.doc.spare_parts_used;\n    console.log(spare);\n    for (let s = 0; s < spare.length; s++) {\n        spare_list[spare[s].name] = {\n            parent: spare[s].parent,\n            spare_parts: spare[s].spare_parts,\n            stock_entry: spare[s].stock_entry\n        };\n    }\n    return spare_list\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Spare Entry Store to Service Centre",
  "enabled": 0,
  "modified": "2023-05-09 12:32:44.542320",
  "module": "SupportRapl",
  "name": "Spare entry store to service centre",
  "script": "frappe.ui.form.on('Spare Entry Store to Service Centre', {\n\tservice_centre(frm) {\n\t\tlet row = frm.add_child('spare_parts', {\n\t\t    service_centre: frm.service_centre\n\t\t})\n\t\tfrm.refresh_field('spare_parts')\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Daily Sales Report",
  "enabled": 1,
  "modified": "2023-05-23 18:35:19.463571",
  "module": "SalesRapl",
  "name": "Daily Sales Report",
  "script": "frappe.ui.form.on('Daily Sales Report', {\n    before_save(frm) {\n        breakFastRates(frm);\n        // quantityDistance(frm);\n        individualAmount(frm);\n        totalExpense(frm);\n    }\n});\n\nfunction breakFastRates(frm) {\n    let et = frm.doc.expenses_table;\n    for (let i = 0; i < et.length; i++) {\n        if (et[i].expense_type === \"Lunch\" && (frappe.user.name === \"vikas.rapl738@gmail.com\" || frappe.user.name === \"midbrainyoga@gmail.com\")) {\n            et[i].amount = 150;\n        } else if (et[i].expense_type === \"Lunch\") {\n            et[i].amount = 100;\n        }\n    }\n}\n\nfunction quantityDistance(frm) {\n    let et = frm.doc.expenses_table;\n    for (let i = 0; i < et.length; i++) {\n        if (et[i].expense_type === \"Distance Travelled\"){\n            et[i].quantity = et[i].to - et[i].from;\n        }\n    }\n}\n\nfunction individualAmount(frm){\n    let et = frm.doc.expenses_table;\n    for (let i = 0; i < et.length; i++) {\n        et[i].amount = et[i].rate * et[i].quantity;\n    }\n}\n\nfunction totalExpense(frm) {\n    let total_expense = 0;\n    let expenses = frm.doc.expenses_table;\n    for (let i = 0; i < expenses.length; i++) {\n        total_expense += expenses[i].amount;\n    }\n    frm.set_value(\"total_expense\", total_expense);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-06-05 09:27:06.454408",
  "module": "Production Rapl",
  "name": "Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n\tstock_entry_type(frm){\n\t   if(frappe.user.has_role(\"Unit 2\")){\n\t\t\tdefaultWarehouses(frm);\n\t\t\tfrm.doc.items=null\n\t   }\n\t},\n\tbefore_save(frm){\n\t   if(frappe.user.has_role(\"Unit 2\")){\n\t\t\tdefaultWarehouses(frm);\n\t   }\n\t},\n});\n\nfunction clearFilter(frm) {\n\tfrm.fields_dict['items'].grid.get_field(\"item_code\").get_query = null;\n}\n\nfunction defaultWarehouses(frm){\n    if (frm.doc.stock_entry_type == \"Tank Transferred\"){\n        frm.set_value(\"from_warehouse\", \"Unit 2 Tank Warehouse - RAPL\")\n        frm.set_value(\"to_warehouse\", \"Stores - RAPL\")\n    } else if (frm.doc.stock_entry_type == \"Tank Manufactured\") {\n        frm.set_value(\"to_warehouse\", \"Unit 2 Tank Warehouse - RAPL\")\n        frm.set_value(\"from_warehouse\", \"\")\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Audit Testing",
  "enabled": 0,
  "modified": "2023-05-26 13:49:38.302310",
  "module": "Testing Rapl",
  "name": "Geyser Details Testing",
  "script": "frappe.ui.form.on('Item Audit Testing', {\n  serial_number(frm) {\n    let sno = frm.doc.serial_number;\n    geyserDetails(sno, function(result) {\n      frappe.db.get_doc(\"Daily Production Entry\", result).then(doc => {\n        let detail = doc.item + \" \" + doc.capacity + \" \" + doc.model_name + \" \" + doc.brand_name + \" \" + doc.date_of_production;\n        frm.set_value('geyser_detail', detail);\n      });\n      addRows(sno, frm); // Pass frm object to the addRows function\n    });\n  },\n});\n\nfunction addRows(sno, frm) {\n  frm.doc.parameters_table = null;\n  frappe.db.get_list('Geyser Testing Parameters').then(doc => {\n    for (let i = 0; i < doc.length; i++) {\n      let child = frm.add_child(\"parameters_table\"); // Use frm object to add child rows\n      frappe.model.set_value(child.doctype, child.name, 'parameter', doc[i].name);\n    }\n    frm.refresh_field(\"parameters_table\");\n  });\n}\n\nfunction geyserDetails(sno, callback) {\n  frappe.call({\n    method: 'raplbaddi.api.get_dpi_parent',\n    args: {\n      sno: sno\n    },\n    callback: function(r) {\n      callback(r.message[0].parent);\n    }\n  });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Permission Test",
  "enabled": 1,
  "modified": "2023-05-25 15:37:22.096187",
  "module": null,
  "name": "Permission",
  "script": "frappe.ui.form.on('Permission Test', {\n\trefresh(frm) {\n\t\tlet user = frappe.has_role(frappe.session.user, \"System Manager\")\n\t\tconsole.log(user)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Entry",
  "enabled": 1,
  "modified": "2023-05-26 15:46:42.795492",
  "module": "Production Rapl",
  "name": "Production Entry",
  "script": "frappe.ui.form.on('Production Entry', {\n  before_save(frm){\n      if(frm.doc.item == \"Geyser\"){\n        let f = frm.doc\n        frm.set_value('total_quantity', 1 + (f.to - f.from)); \n      }\n    },\n  before_submit(frm) {\n    let f = frm.doc;\n    if (frm.doc.item === \"Geyser\") {\n      let serialPrefix = \"000000\";\n      let serialLength = 6;\n\n      const insertPromises = [];\n      for (let i = frm.doc.from; i <= frm.doc.to; i++) {\n        let serialNo = '3' + (serialPrefix + i).slice(-serialLength);\n        const doc = {\n          doctype: 'Serial Number Geyser',\n          daily_production_entry: frm.doc.name,\n          serial_number: serialNo\n        };\n        const insertPromise = new Promise((resolve, reject) => {\n          frappe.db.insert(doc)\n            .then(resolve)\n            .catch(reject);\n        });\n        insertPromises.push(insertPromise);\n      }\n\n      const progressBar = frappe.show_progress('Inserting Serial Numbers', 0, frm.doc.to - frm.doc.from, \"Inserting\");\n\n      Promise.all(insertPromises)\n        .then(docs => {\n          progressBar.hide();\n          // Handle success or perform additional operations\n        })\n        .catch(err => {\n          progressBar.hide();\n          frappe.msgprint('Failed to insert Serial Numbers.', 'Error');\n          // Handle error\n        });\n    }\n  },\n\n  before_cancel(frm) {\n    if (frm.doc.item === \"Geyser\") {\n      let serialPrefix = \"000000\";\n      let serialLength = 6;\n\n      const deletePromises = [];\n      const progressBar = frappe.show_progress('Deleting Serial Numbers', 0, frm.doc.to - frm.doc.from, 'Deleting');\n\n      for (let i = frm.doc.from; i <= frm.doc.to; i++) {\n        let serialNo = '3' + (serialPrefix + i).slice(-serialLength);\n        const deletePromise = new Promise((resolve, reject) => {\n          frappe.db.delete_doc('Serial Number Geyser', serialNo)\n            .then(resolve)\n            .catch(reject);\n        });\n        deletePromises.push(deletePromise);\n      }\n\n      Promise.all(deletePromises)\n        .then(() => {\n          progressBar.hide();\n        })\n        .catch(err => {\n          progressBar.hide();\n          frappe.msgprint('Failed to delete Serial Numbers.', 'Error');\n        });\n    }\n  },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Testing Entry",
  "enabled": 1,
  "modified": "2023-05-27 16:37:01.745513",
  "module": "Testing Rapl",
  "name": "Item Testing Entry",
  "script": "frappe.ui.form.on('Item Testing Entry', {\n  serial_number(frm) {\n    let sno = frm.doc.serial_number;\n    addRows(sno, frm);\n  },\n});\n\nfunction addRows(sno, frm) {\n  frm.doc.item_testing_parameters = [];\n  frappe.db.get_list('Geyser Testing Parameters', { limit: 100 }).then(docs => {\n    docs.forEach(doc => {\n      let child = frm.add_child(\"item_testing_parameters\"); // Use frm object to add child rows\n      frappe.model.set_value(child.doctype, child.name, 'parameter', doc.name);\n    });\n    frm.refresh_field(\"item_testing_parameters\");\n  });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-09-03 12:18:24.440899",
  "module": "SalesRapl",
  "name": "SO Discount",
  "script": "frappe.ui.form.on('Sales Order', {\n\tdiscount_in_rs(frm) {\n        discountEachItem(frm)\n\t},\n\tbefore_save(frm){\n\t    discountEachItem(frm)\n\t},\n\tremove_discount(frm){\n\t    removeDiscount(frm)\n\t},\n\tupdate_discount(frm){\n\t    discountEachItem(frm)\n\t}\n})\n\nfrappe.ui.form.on('Sales Order Item', {\n    item_code(frm){\n        discountEachItem(frm)\n    },\n})\n\nfunction removeDiscount(frm){\n    $.each(frm.doc.items || [], function(i,d){\n        d.rate += d.discount_amount\n        d.amount = d.rate * d.qty\n        d.discount_percentage = 0\n        d.discount_amount = 0\n        refresh_field(\"items\")\n    })}\n\nfunction discountEachItem(frm){\n\t$.each(frm.doc.items || [], function(i, d){\n\t    if(!d.discount_amount) {\n\t        d.discount_percentage = (frm.doc.discount_in_rs/d.rate)*100;\n\t        d.discount_amount = frm.doc.discount_in_rs\n\t        d.rate -= d.discount_amount\n\t        d.amount = d.rate * d.qty\n\t    }\n\t})\n\trefresh_field(\"items\")\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Centre",
  "enabled": 1,
  "modified": "2023-06-02 12:19:17.429876",
  "module": "SupportRapl",
  "name": "Service centre hide workspace",
  "script": "frappe.ui.form.on('Service Centre', {\n\trefresh(frm) {\n \t\tconsole.log(frappe)\n        \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-06-29 17:52:37.899293",
  "module": "SalesRapl",
  "name": "SO Last Discount",
  "script": "frappe.ui.form.on('Sales Order', {\n  customer: async function(frm) {\n    let soi = await saleOrder(frm);\n    discount(frm);\n  },\n  get_items_from_last_order: function(frm) {\n    lastsoiItems(frm);\n  }\n});\n\nasync function saleOrder(frm) {\n  const r = await frappe.call('raplbaddi.api.get_last_soi_of_customer', {\n    customer: frm.doc.customer\n  });\n  soi = r.message;\n  return soi\n}\n\nfunction discount(frm) {\n    if(soi == \"Doc not found\") {\n        console.log(\"Hasn't found the document\");\n    } else {\n        frm.doc.discount_in_rs = soi.discount_in_rs;\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payments Rapl",
  "enabled": 1,
  "modified": "2023-06-07 16:45:34.137192",
  "module": "Raplbaddi",
  "name": "Payments Clipboard",
  "script": "frappe.ui.form.on('Payments Rapl', {\n  copy(frm) {\n    const { account_holder_name, amount, gpay_phonepe_paytm, account_number, ifsc_code, party_name } = frm.doc;\n    const fieldMapping = {\n      amount: '*Amount*',\n      account_holder_name: 'Account Holder - Name',\n      gpay: 'Gpay/PhonePe/Paytm',\n      account_number: 'Account Number',\n      ifsc_code: 'IFSC',\n      date: 'Date'\n    };\n\n    const data = Object.entries(fieldMapping)\n      .filter(([field]) => !!frm.doc[field])\n      .map(([field, label]) => `${label}: ${frm.doc[field]}`);\n\n    if (data.length > 0) {\n      navigator.clipboard.writeText(data.join('\\n')).then((r) => {\n            console.log(r)\n      });\n    } else {\n      frappe.msgprint('No data to copy', 'Details');\n    }\n  },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2023-06-15 17:09:39.546937",
  "module": "SalesRapl",
  "name": "Customer Auto GST",
  "script": "frappe.ui.form.on('Customer', {\n    fetch: function(frm){\n        let doc = frm.doc\n        let json = doc.json\n        let data = JSON.parse(json, null, '\\t')\n        frm.set_value('customer_name', data[4])\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-07-20 11:33:06.918476",
  "module": null,
  "name": "SO Rates Itemwise",
  "script": "let so;\n\nfrappe.ui.form.on('Sales Order', {\n  customer: async function(frm) {\n    await saleOrder(frm);\n  },\n  apply_old_discounts: function(frm){\n    frm.doc.items.forEach((item) => {oldDiscounts(frm, item)})  \n  }\n});\n\n\nfunction oldDiscounts(frm, item){\n    let discount = get_discount(item.item_code, frm)\n    item.discount_amount = discount\n    item.rate = item.rate - item.discount_amount\n    frm.refresh()\n}\n\nasync function saleOrder(frm) {\n  const r = await frappe.call('raplbaddi.api.price_list_of_customer', {\n    customer: frm.doc.customer\n  });\n  so = r.message;\n}\n\nfrappe.ui.form.on('Sales Order Item', {\n  apply_old_discounts: function(frm, cdt, cdn) {\n    const item = locals[cdt][cdn];\n    const discount_amount = get_discount(item.item_code, frm);\n    frappe.model.set_value(cdt, cdn, 'discount_amount', discount_amount);\n    console.log(discount_amount);\n  }\n});\n\nfunction get_discount(itemCode, frm) {\n  for (const item of so) {\n    if (item.item_code === itemCode) {\n      return parseInt(item.discount_amount);\n    }\n  }\n  return 0;\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-06-19 19:03:15.711489",
  "module": null,
  "name": "Item List",
  "script": "frappe.listview_settings['Item'] = {\n    query_fields: ['item_name'],\n    query_filters: [\n    ],\n    parser: function(data, render) {\n        let names = [];\n        data.forEach(function(row) {\n            names.push(row.name);\n        });\n        if (!names.length) {\n            return render();\n        }\n        frappe.db.get_list('Item', {\n            fields: ['name', 'price'],\n            filters: {\n                name: ['in', names],\n                is_approved: 1,\n            }\n        }).then(function(list) {\n            list.forEach(function(vals) {\n                data.forEach(function(row) {\n                    if (vals.name === row.name) {\n                        row.price = vals.price;\n                    }\n                });\n            });\n            render();\n        });\n    },\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2023-09-12 14:50:31.363967",
  "module": null,
  "name": "Item Naming",
  "script": "frappe.ui.form.on('Item', {\n\tstandardize_name(frm) {\n\t\tlet doc = frm.doc;\n\t\tfrappe.db.get_value('Item Group', doc.item_group, 'abbreviation')\n\t\t.then(r1 => {\n\t\t\tlet group = r1.message.abbreviation;\n\t\t\tfrappe.db.get_value('Geyser Model', doc.geyser_model, 'abbreviation')\n\t\t\t.then(r2 => {\n\t\t\t\tlet model = r2.message.abbreviation;\n\t\t\t\tconsole.log(model)\n\t\t\t\tlet capacity = doc.capacity;\n\t\t\t\tlet brand = 'Plain'\n\t\t\t\tlet brand_prefix, old, craft\n\t\t\t\tif(doc.brand_prefix){\n\t\t\t\t    brand_prefix = doc.brand_prefix\n\t\t\t\t}else{\n\t\t\t\t    brand_prefix = ''\n\t\t\t\t}\n\t\t\t\tif(doc.box_category == \"Printed\" && doc.old){\n\t\t\t\t    old = 'Old'\n\t\t\t\t} else {\n\t\t\t\t    old = ''\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(doc.craft_paper){\n\t\t\t\t    craft = 'Craft'\n\t\t\t\t} else {\n\t\t\t\t    craft = ''\n\t\t\t\t}\n\t\t\t\tif (doc.brand){\n\t\t\t\t\tbrand = doc.brand\n\t\t\t\t} else {\n\t\t\t\t\tbrand = doc.plain_box_type\n\t\t\t\t}\n\t\t\t\tif(capacity == 1 || capacity == 3 || capacity == 6 || capacity == 10 || capacity == 70 || capacity == 100){\n\t\t\t\t    frm.set_value('item_name', (group + capacity + \" \" + brand + \" \" + brand_prefix + old + craft).trim());\n\t\t\t\t    frm.set_value('item_code', (group + capacity + \" \" + brand + \" \" + brand_prefix + old + craft).trim());\n\t\t\t\t} else{\n\t\t\t\t    frm.set_value('item_name', (group + capacity + model + \" \" + brand + \" \" + brand_prefix + old + craft).trim());\n\t\t\t\t    frm.set_value('item_code', (group + capacity + \" \" + brand + \" \" + brand_prefix + old + craft).trim());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-09-20 19:16:08.414632",
  "module": "Stock Rapl",
  "name": "PB Stock Entry",
  "script": "const boxUser = {\n    jaiAmbe: {\n        user: 'production.jaiambey2024@gmail.com',\n        home: 'Jai Ambey Industries - RAPL',\n        away: 'Packing Boxes - RAPL'\n    },\n};\n\nfrappe.ui.form.on('Stock Entry', {\n    onload: function(frm) {\n        entryDefaults(frm, boxUser);\n    },\n    stock_entry_type: function(frm) {\n        entryDefaults(frm, boxUser);\n        let doc = frm.doc;\n        if (doc.stock_entry_type === 'PB Issue') {\n            frm.set_value('from_warehouse', 'Packing Boxes - RAPL');\n            frm.set_value('to_warehouse', null);\n        }\n        if (doc.stock_entry_type === 'PB Receipt') {\n            frm.set_value('to_warehouse', 'Packing Boxes - RAPL');\n            frm.set_value('from_warehouse', null);\n        }\n    },\n    before_save(frm){\n        var total = 0;\n        frm.doc.items.forEach(function(d) { total += d.qty; });\n        frm.set_value('total_qty', total);\n        frm.refresh_field('total_qty');\n    }\n});\n\nfunction entryDefaults(frm, boxUser) {\n    for (const [key, value] of Object.entries(boxUser)) {\n        if (frappe.session.user === value.user) {\n            if (frm.doc.stock_entry_type === 'PB Transfer') {\n                frm.set_value('from_warehouse', value.home);\n                frm.set_value('to_warehouse', value.away);\n                clearWarehouse(frm);\n            } else if (frm.doc.stock_entry_type === 'PB Production') {\n                frm.set_value('to_warehouse', value.home);\n                clearWarehouse(frm);\n            }\n        }\n    }\n}\n\nfunction clearWarehouse(frm){\n  frm.doc.items.forEach((i) => {\n    i.s_warehouse = ''\n    i.t_warehouse = ''\n})\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packing Boxes Entry",
  "enabled": 0,
  "modified": "2023-06-28 10:08:45.180338",
  "module": null,
  "name": "PB Stock Entry 1",
  "script": "frappe.ui.form.on('Packing Boxes Entry', {\n    after_save(frm) {\n        frappe.call({\n            method: 'erpnext.stock.doctype.stock_entry.stock_entry_utils.make_stock_entry',\n            args: {\n                \"item_code\": \"I102\",\n                \"qty\": \"1\",\n                \"purpose\": \"Material Issue\",\n                \"from_warehouse\": \"Packing Boxes - RAPL\"\n            },\n            callback: function(r) {\n                if (!r.exc) {\n                    console.log(r)\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2023-06-28 10:27:58.975286",
  "module": null,
  "name": "Customer Gst",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh(frm) {\n\t\tcopyPageUrl()\n\t}\n})\n\nasync function copyPageUrl() {\n  try {\n    await navigator.clipboard.writeText(location.href);\n    console.log('Page URL copied to clipboard');\n  } catch (err) {\n    console.error('Failed to copy: ', err);\n  }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "IssueRapl",
  "enabled": 1,
  "modified": "2023-06-30 12:45:49.995701",
  "module": "SupportRapl",
  "name": "Dynamic Field Issue Rapl",
  "script": "frappe.ui.form.on(\"IssueRapl\", {\n    search_serial_number(frm) {\n        let dcsno = \"Geyser Serial Number Change\"\n        let dsno = \"Serial Number Geyser\"\n        let doc = frm.doc\n        let sno = doc.serial_number\n        let details = null\n        if(sno){\n            frappe.db.get_doc(dcsno, sno).then(r => {\n                frm.set_value({\n                    model: r.model_name,\n                    brand_name: r.new_brand_name,\n                    geyser_capacity: r.capacity,\n                    invoice_date: r.date\n                })\n            })\n        }\n        \n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PB Linewise Location",
  "enabled": 1,
  "modified": "2023-06-30 14:17:35.200743",
  "module": "Stock Rapl",
  "name": "PB Linewise Location",
  "script": "frappe.ui.form.on(\"PB Linewise Location\", \"onload\", function(frm) {\n    frm.set_query(\"packing_box\", function() {\n        return {\n            \"filters\": {\n                \"item_group\": \"Packing Boxes\"\n            }\n        };\n    });\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Tasks Rapl Report",
  "enabled": 1,
  "modified": "2023-07-05 14:33:21.424043",
  "module": "Tasks Rapl",
  "name": "Tasks Rapl Report",
  "script": "frappe.ui.form.on('Tasks Rapl Report', {\n  onload(frm){\n    frm.set_value('user', frappe.session.user)\n  },\n  frequency(frm) {\n    let frequency = frm.doc.frequency;\n    let user = frappe.session.user\n    // let user = 'manohar.rapl2002@gmail.com'\n    addRows(user, frequency, frm);\n  },\n});\n\nfunction addRows(user, frequency, frm) {\n  frm.doc.item_testing_parameters = [];\n  frappe.call({\n    method: 'raplbaddi.api.get_task',\n    args: {\n        'user': user,\n        'frequency': frequency\n    },\n    callback: function(r) {\n        frm.clear_table(\"tasks_rapl_table\")\n        frm.refresh_field(\"tasks_rapl_table\");\n        if (!r.exc) {\n            r.message.forEach(task => {\n                let child = frm.add_child(\"tasks_rapl_table\");\n                frappe.model.set_value(child.doctype, child.name, 'task_name', task.name);\n                frappe.model.set_value(child.doctype, child.name, 'check', 1);\n            })\n            frm.refresh_field(\"tasks_rapl_table\");\n            \n        }\n    }\n    })\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-07-13 09:28:16.894906",
  "module": "Stock Rapl",
  "name": "Element Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n    onload(frm){\n\t\tfrm.set_query(\"item_code\", \"items\", (doc, cdt, cdn) => {\n\t\t\tlet row = locals[cdt][cdn];\n\t\t\tif(frm.doc.stock_entry_type == \"Element Issue\" || frm.doc.stock_entry_type == \"Element Manufactured\" ){\n    \t\t\treturn {\n    \t\t\t\tfilters: {\n    \t\t\t\t\t'item_group': \"Element Unit\"\n    \t\t\t\t}\n    \t\t\t}\n\t\t\t}\n\t\t});  \n    },\n    \n    stock_entry_type(frm) {\n        let doc = frm.doc;\n        if (doc.stock_entry_type && doc.stock_entry_type === 'Element Issue') {\n            frm.set_value('from_warehouse', 'Element Section - Rapl');\n            frm.set_value('to_warehouse', null);\n        }\n        if (doc.stock_entry_type && doc.stock_entry_type === 'Element Manufactured') {\n            frm.set_value('to_warehouse', 'Element Section - Rapl');\n            frm.set_value('from_warehouse', null);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Entry",
  "enabled": 0,
  "modified": "2023-07-13 09:27:55.796872",
  "module": null,
  "name": "Element Production Entry",
  "script": "frappe.ui.form.on('Production Entry', {\n    before_submit(frm) {\n        if (frm.doc.item == \"Element\") {\n\n            frappe.call({\n                method: 'erpnext.stock.doctype.stock_entry.stock_entry_utils.make_stock_entry',\n                args: {\n                    \"item_code\": frm.doc.element_type,\n                    \"qty\": frm.doc.total_quantity,\n                    \"to_warehouse\": \"Element Section - Rapl\",\n                    \"purpose\": \"Element Receipt\"\n                },\n                callback: function(r) {\n                    if (!r.exc) {\n                        console.log(r)\n                    }\n                }\n            });\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2023-07-28 10:40:31.289752",
  "module": null,
  "name": "Stock Entry Geyser Multiple Field Add",
  "script": "frappe.ui.form.on('Stock Entry', {\n    stock_entry_type(frm) {\n        if (frm.doc.stock_entry_type == \"Element Issue\") {\n            new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Sales Order\",\n                target: frm,\n                setters: {\n                    customer: null,\n                    status: null\n                },\n                add_filters_group: 1,\n                date_field: \"transaction_date\",\n                allow_child_item_selection: 1,\n                child_fieldname: \"items\", // child table fieldname, whose records will be shown &amp; can be filtered\n                child_columns: [\"item_name\", \"qty\"], // child item columns to be displayed\n                get_query() {\n                    return {\n                        filters: {\n                            docstatus: ['!=', 2]\n                        }\n                    }\n                },\n                action(selections, args) {\n                    console.log(args.filtered_children); // list of selected item names\n                }\n            });\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2023-07-15 10:50:22.774161",
  "module": null,
  "name": "Box Request",
  "script": "frappe.ui.form.on('Material Request', {\n\tonload(frm) {\n\t\tif(frappe.user.has_role('Box Manager')){\n\t\t\tfrm.set_value(\"material_request_type\", \"Material Issue\");\n\t\t\tfrm.set_value(\"schedule_date\", frappe.datetime.now_date());\n\t\t\tfrm.refresh_field('material_request_type');\n\t\t\tfrm.set_value(\"item_group\", \"Packing Boxes\")\n\t\t}\n\t},\n\titem_group(frm){\n    \tfrm.set_query(\"item_code\", \"items\", function() {\n\t\treturn {\n\t\t\tfilters: { \"item_group\": frm.doc.item_group }\n\t\t};\n\t});\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-09-21 11:25:32.159026",
  "module": null,
  "name": "Delivery note brand warehouse",
  "script": "frappe.ui.form.on('Delivery Note', {\n    onload(frm){\n      frm.set_value('set_warehouse', \"\")\n      frm.refresh_field(\"set_warehouse\")\n    },\n\tbefore_save(frm) {\n        frm.doc.items.forEach(\n            (item) => {\n                if(item.brand){\n                    item.warehouse = item.brand + ' - RAPL'\n                } else {\n                    item.warehouse = 'Stores - RAPL'\n                }\n            }    \n        )\n        frm.refresh_field(\"items\")\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Brand",
  "enabled": 1,
  "modified": "2023-09-29 15:36:02.038266",
  "module": null,
  "name": "Brand warehouse",
  "script": "frappe.ui.form.on('Brand', {\n\tadd_supplier(frm) {\n\t\tfrm.doc.paper_names.forEach(i => {\n\t\t\tfrm.add_child('priority_and_rates', { 'supplier': frm.doc.supplier, 'priority': frm.doc.paper_name, 'paper_name': i.title, 'priority': frm.doc.priority})\n\t\t})\n\t\tfrm.refresh_field('priority_and_rates')\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-10-23 10:38:17.354889",
  "module": "SalesRapl",
  "name": "Sales Order Update Items",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh: function(frm) {\n\t\tif(frm.doc.docstatus === 1) {\n\t\t\tif (frm.doc.status !== 'Closed' && flt(frm.doc.per_delivered, 6) < 100 && flt(frm.doc.per_billed, 6) < 100) {\n\t\t\t    frm.remove_custom_button('Update Items')\n\t\t\t\tfrm.add_custom_button(__('Update Item'), () => {\n\t\t\t\t\terpnext.utils.update_child_items_rapl({\n\t\t\t\t\t\tfrm: frm,\n\t\t\t\t\t\tchild_docname: \"items\",\n\t\t\t\t\t\tchild_doctype: \"Sales Order Detail\",\n\t\t\t\t\t\tcannot_add_row: false,\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n})\n\n\nfrappe.provide(\"erpnext\");\nfrappe.provide(\"erpnext.utils\");\n\nerpnext.utils.update_child_items_rapl = function(opts) {\n\tconst frm = opts.frm;\n\tconst cannot_add_row = (typeof opts.cannot_add_row === 'undefined') ? true : opts.cannot_add_row;\n\tconst child_docname = (typeof opts.cannot_add_row === 'undefined') ? \"items\" : opts.child_docname;\n\tconst child_meta = frappe.get_meta(`${frm.doc.doctype} Item`);\n\tconst get_precision = (fieldname) => child_meta.fields.find(f => f.fieldname == fieldname).precision;\n\n\tthis.data = frm.doc[opts.child_docname].map((d) => {\n\t\treturn {\n\t\t\t\"docname\": d.name,\n\t\t\t\"name\": d.name,\n\t\t\t\"name_of_brand\": d.name_of_brand,\n\t\t\t\"item_code\": d.item_code,\n\t\t\t\"delivery_date\": d.delivery_date,\n\t\t\t\"schedule_date\": d.schedule_date,\n\t\t\t\"conversion_factor\": d.conversion_factor,\n\t\t\t\"qty\": d.qty,\n\t\t\t\"rate\": d.rate,\n\t\t\t\"uom\": d.uom\n\t\t}\n\t});\n\n\tconst fields = [{\n\t\tfieldtype:'Data',\n\t\tfieldname:\"docname\",\n\t\tread_only: 1,\n\t\thidden: 1,\n\t}, {\n\t\tfieldtype:'Link',\n\t\tfieldname:\"item_code\",\n\t\toptions: 'Item',\n\t\tin_list_view: 1,\n\t\tread_only: 0,\n\t\tdisabled: 0,\n\t\tlabel: __('Item Code'),\n\t\tget_query: function() {\n\t\t\tlet filters;\n\t\t\tif (frm.doc.doctype == 'Sales Order') {\n\t\t\t\tfilters = {\"is_sales_item\": 1};\n\t\t\t} else if (frm.doc.doctype == 'Purchase Order') {\n\t\t\t\tif (frm.doc.is_subcontracted) {\n\t\t\t\t\tif (frm.doc.is_old_subcontracting_flow) {\n\t\t\t\t\t\tfilters = {\"is_sub_contracted_item\": 1};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfilters = {\"is_stock_item\": 0};\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfilters = {\"is_purchase_item\": 1};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tquery: \"erpnext.controllers.queries.item_query\",\n\t\t\t\tfilters: filters\n\t\t\t};\n\t\t}\n\t}, {\n\t\tfieldtype:'Link',\n\t\tfieldname:'uom',\n\t\toptions: 'UOM',\n\t\tread_only: 0,\n\t\tlabel: __('UOM'),\n\t\treqd: 1,\n\t\tonchange: function () {\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"erpnext.stock.get_item_details.get_conversion_factor\",\n\t\t\t\targs: { item_code: this.doc.item_code, uom: this.value },\n\t\t\t\tcallback: r => {\n\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\tif (this.doc.conversion_factor == r.message.conversion_factor) return;\n\n\t\t\t\t\t\tconst docname = this.doc.docname;\n\t\t\t\t\t\tdialog.fields_dict.trans_items.df.data.some(doc => {\n\t\t\t\t\t\t\tif (doc.docname == docname) {\n\t\t\t\t\t\t\t\tdoc.conversion_factor = r.message.conversion_factor;\n\t\t\t\t\t\t\t\tdialog.fields_dict.trans_items.grid.refresh();\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tfieldtype:'Float',\n\t\tfieldname:\"qty\",\n\t\tdefault: 0,\n\t\tread_only: 0,\n\t\tin_list_view: 1,\n\t\tlabel: __('Qty'),\n\t\tprecision: get_precision(\"qty\")\n\t}, {\n\t\tfieldtype:'Currency',\n\t\tfieldname:\"rate\",\n\t\toptions: \"currency\",\n\t\tdefault: 0,\n\t\tread_only: 0,\n\t\tin_list_view: 1,\n\t\tlabel: __('Rate'),\n\t\tprecision: get_precision(\"rate\")\n\t}, \n\t{\n\t\tfieldtype:'Link',\n\t\tfieldname:\"name_of_brand\",\n\t\toptions: \"Brand\",\n\t\tread_only: 0,\n\t\tin_list_view: 1,\n\t\tlabel: __('Brand'),\n\t}\n\t];\n\n\tif (frm.doc.doctype == 'Sales Order' || frm.doc.doctype == 'Purchase Order' ) {\n\t\tfields.splice(2, 0, {\n\t\t\tfieldtype: 'Date',\n\t\t\tfieldname: frm.doc.doctype == 'Sales Order' ? \"delivery_date\" : \"schedule_date\",\n\t\t\tin_list_view: 1,\n\t\t\tlabel: frm.doc.doctype == 'Sales Order' ? __(\"Delivery Date\") : __(\"Reqd by date\"),\n\t\t\treqd: 1\n\t\t})\n\t\tfields.splice(3, 0, {\n\t\t\tfieldtype: 'Float',\n\t\t\tfieldname: \"conversion_factor\",\n\t\t\tlabel: __(\"Conversion Factor\"),\n\t\t\tprecision: get_precision('conversion_factor')\n\t\t})\n\t}\n\n\tlet dialog = new frappe.ui.Dialog({\n\t\ttitle: __(\"Update Items\"),\n\t\tsize: \"large\",\n\t\tfields: [\n\t\t\t{\n\t\t\t\tfieldname: \"trans_items\",\n\t\t\t\tfieldtype: \"Table\",\n\t\t\t\tlabel: \"Items\",\n\t\t\t\tcannot_add_rows: cannot_add_row,\n\t\t\t\tin_place_edit: false,\n\t\t\t\treqd: 1,\n\t\t\t\tdata: this.data,\n\t\t\t\tget_data: () => {\n\t\t\t\t\treturn this.data;\n\t\t\t\t},\n\t\t\t\tfields: fields\n\t\t\t},\n\t\t],\n\t\tprimary_action: function() {\n\t\t\tconst trans_items = this.get_values()[\"trans_items\"].filter((item) => !!item.item_code);\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'erpnext.controllers.accounts_controller.update_child_qty_rate',\n\t\t\t\tfreeze: true,\n\t\t\t\targs: {\n\t\t\t\t\t'parent_doctype': frm.doc.doctype,\n\t\t\t\t\t'trans_items': trans_items,\n\t\t\t\t\t'parent_doctype_name': frm.doc.name,\n\t\t\t\t\t'child_docname': child_docname\n\t\t\t\t},\n\t\t\t\tcallback: function() {\n\t\t\t\t\tfrm.reload_doc();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.hide();\n\t\t\trefresh_field(\"items\");\n\t\t},\n\t\tprimary_action_label: __('Update')\n\t})\n\n\tdialog.show();\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-08-24 15:28:28.393387",
  "module": null,
  "name": "B2S2 Delivery Note",
  "script": "frappe.ui.form.on('Delivery Note', {\n\tcustomer_address(frm) {\n\t\tfrm.set_query(\"shipping_address_name\", () => {\n\t\t\treturn {\n    \t\t\t\tfilters: {\n\t\t\t\t}\n    \t\t}\n\t\t});  \n\t},\n\tcustomer(frm) {\n\t\tfrm.set_query(\"shipping_address_name\", () => {\n\t\t\treturn {\n    \t\t\t\tfilters: {\n\t\t\t\t}\n    \t\t}\n\t\t});  \n\t},\n\tafter_save(frm){\n\t    if(!frm.doc.shipping_address_name){\n\t        frm.set_value(\"shipping_address_name\", frm.doc.customer_address)\n\t\t    frm.refresh_filed(\"shipping_address_name\")\n\t    }\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-09-06 18:28:51.363009",
  "module": "Stock Rapl",
  "name": "DN2Party",
  "script": "frappe.ui.form.on('Delivery Note', {\n\trefresh(frm) {\n\t    let doc = frm.doc\n\t    let msg = 'Party: *' + doc.customer + '*'\n\t    let itemJ = '%0AThe following items has been dispatched%0AON: ' + Date(Date.now()).toLocaleString() + '%0A----------------------------'\n        let n = 1\n\t    doc.items.forEach((i) => {\n\t        itemJ = itemJ + '%0A' + n + '. ' + i.item_name + '   |   ' + i.brand + '   |   ' + i.qty\n\t        n = n + 1\n\t    })\n\t    msg = msg + itemJ\n\t    msg = msg + '%0A-----------------------------%0A' + 'Total Quantity - ' + doc.total_qty\n\t    if(frm.doc.docstatus == 1){\n    \t\tfrm.add_custom_button('To Customer', function(){\n                window.open(`https://web.whatsapp.com/send/?phone=7838003978&text=${msg}`, '_blank')\n    \t\t}, 'Whatsapp')\n    \t\tfrm.add_custom_button('To Salesman', function(){\n                window.open(`https://web.whatsapp.com/send/?phone=7838003978&text=${msg}`, '_blank')\n    \t\t}, 'Whatsapp')\n\t    }\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-08-25 16:31:57.506652",
  "module": null,
  "name": "SODlp",
  "script": "frappe.ui.form.on('Sales Order', {\n\tcustomer(frm) {\n\t    console.log(frm.get_doc('Customer', frm.doc.customer))\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-08-26 17:32:36.825966",
  "module": "Stock Rapl",
  "name": "Cancellation Dialogue - Delivery Note",
  "script": "frappe.ui.form.on('Delivery Note', {\n\tbefore_cancel(frm) {\n\t\tvar d = new frappe.ui.Dialog({\n\t\t\ttitle: __('Reason for Cancellation'),\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\t\"fieldname\": \"reason_for_cancellation\",\n\t\t\t\t\t\"fieldtype\": \"Text\",\n\t\t\t\t\t\"reqd\": 1,\n\t\t\t\t}\n\t\t\t],\n\t\t\tprimary_action: function() {\n\t\t\t\tvar data = d.get_values();\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: \"frappe.desk.form.utils.add_comment\",\n\t\t\t\t\targs: {\n\t\t\t\t\t\treference_doctype: frm.doctype,\n\t\t\t\t\t\treference_name: frm.docname,\n\t\t\t\t\t\tcontent: __('Reason for Cancellation:') + ' ' + data.reason_for_cancellation,\n\t\t\t\t\t\tcomment_email: frappe.session.user,\n\t\t\t\t\t\tcomment_by: frappe.session.user_fullname\n\t\t\t\t\t},\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tif(!r.exc) {\n\t\t\t\t\t\t\td.hide();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\td.show();\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-08-29 17:36:44.694813",
  "module": "Stock Rapl",
  "name": "DN Amount",
  "script": "frappe.ui.form.on('Delivery Note', {\n    before_save(frm){\n        let amt = 0\n        for(let i = 0; i < frm.doc.freight.length; i++){\n            amt = amt + frm.doc.freight[i].amount\n        }\n        frm.set_value('amount', amt)\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-10-31 11:57:57.521703",
  "module": "SalesRapl",
  "name": "Sales Order",
  "script": "let count = 1\nfrappe.ui.form.on('Sales Order', {\n    onload(frm){\n        if(frm.doc.docstatus === 1){\n            frm.add_custom_button(__('Toggle Delivered'), function(){\n                $.each(frm.doc.items || [], function (i, v) {\n                    if (v.qty <= v.delivered_qty) {\n                        const item = $(`[data-idx='${i+1}']`);\n                        if (count % 2 !== 0) {\n                            item.hide();\n                        } else {\n                            item.show();\n                        }\n                    }\n                });\n                count += 1; // Increment the count after each button click.\n            });\n        }\n        \n            if(box != '') {\n                // frm.set_query(\"custom_box\", \"items\", (doc,cdt,cdn) => {\n                //     let row = locals[cdt][cdn]\n                //     return {\n                //         filters: [\n                //             ['Item', 'name', '=', box]\n                //         ]\n                //     }\n                // })\n            } else {\n                    frm.set_query(\"custom_box\", \"items\", (doc, cdt, cdn) => {\n                        let row = locals[cdt][cdn]\n                        return {\n                            filters: [\n                                ['Item', 'item_group', '=', 'Packing Boxes'],\n                                ['Item', 'capacity', '=', ltr],\n                                ['Item', 'geyser_model', '=', model],\n                                ['Item', 'plain_box_type', 'is', 'set'],\n                                ['Item', 'disabled', '=', 0]\n                            ]\n                        }\n                    })\n                }\n//         frm.set_query(\"plain_type\", \"items\", (doc, cdt, cdn) => {\n// \t\t\tlet row = locals[cdt][cdn];\n// \t\t\tif(frm.doc.selling_price_list == 'Geyser Jammu' || frm.doc.selling_price_list == 'Geyser Kashmir'){\n//     \t\t\treturn {\n//     \t\t\t\tfilters: [\n//     \t\t\t\t\t['Plain Box Type Table', 'model', '=', model],\n//     \t\t\t\t\t['Plain Box Type Table', 'capacity', '=', ltr],\n//     \t\t\t\t\t['jk_only', '=', 1]\n//     \t\t\t\t]\n//     \t\t\t}\n// \t\t\t}else {\n//     \t\t\treturn {\n//     \t\t\t\tfilters: [\n//     \t\t\t\t\t['Plain Box Type Table', 'model', '=', model],\n//     \t\t\t\t\t['Plain Box Type Table', 'capacity', '=', ltr],\n//     \t\t\t\t\t['jk_only', '=', 0]\n//     \t\t\t\t]\n//     \t\t\t}\n// \t\t\t}\n// \t\t});\n        if(frappe.user.name == 'kumarom906@gmail.com' && frm.doc.conditions && frm.doc.docstatus == 1){\n            frappe.warn('!!!These are the Remarks!!!',\n            frm.doc.conditions,\n            () => {\n                {}\n            },\n            'Continue',\n            true\n            )\n        }\n        if(frm.doc.customer){\n            frm.set_query(\"shipping_address_name\", () => {\n                return { filters: {} }\n            });\n        }\n    },\n    status(frm){\n        if ((frm.doc.status == \"Closed\" || frm.doc.status == \"Hold\" )&& frm.doc.custom_status === 'Urgent') {\n            unreserve(frm)\n        }\n    },\n    refresh(frm) {\n        if (frm.doc.status == 'Draft') {\n            frm.set_query(\"shipping_address_name\", () => {\n                return {\n                    filters: {\n                    }\n                }\n            });\n        }\n\t\tif (frm.doc.docstatus==1) {\n            if (frm.has_perm('submit') && frm.doc.custom_status !== 'Urgent') {\n                frm.add_custom_button(__('Urgent'), function() {\n                    reserve(frm)\n                }, __('Status'));\n            }\n\t\t\tif(frm.doc.custom_status === \"Urgent\") {\n\t\t\t\t   frm.add_custom_button(__('Remove Urgent'), function() {\n                       unreserve(frm)\n\t\t\t\t\t   frm.set_value('custom_status', '')\n\t\t\t\t\t   frm.save('Update');\n\t\t\t\t   }, __(\"Status\"));\n\t\t\t}\n\t\t}\n    },\n    before_save(frm) {\n        let zero_discount_items = []\n        $.each(frm.doc.items || [], function (i, v) {\n            frappe.model.set_value(v.doctype, v.name, \"warehouse\", v.name_of_brand + \" - RAPL\")\n            frappe.model.set_value(v.doctype, v.name, \"delivery_date\", frm.doc.delivery_date)\n            frappe.model.set_value(v.doctype, v.name, \"discount_amount\", Math.round(v.discount_amount))\n            frappe.model.set_value(v.doctype, v.name, \"rate\", Math.round(v.rate))\n            frm.refresh_field(\"items\")\n            if(v.rate <= 0) {\n                frappe.throw('Rate of ' + v.item_code + ' should not be 0')\n            }\n            if(v.brand == 'Red Star' && (v.item_code.endsWith('K') || v.item_code.endsWith('KW') || v.item_code.endsWith('KWT') || v.item_code.endsWith('KT')) ) {\n                frappe.throw('Red Star Brand Can not be selected in Kiya Models')\n            }\n            if(!v.custom_box){\n                frappe.model.set_value(v.doctype, v.name, \"custom_box\", 'Any Plain')\n            }\n            if(v.discount_amount <= 0) {\n                zero_discount_items.push(`${v.item_code} - ${v.name_of_brand}`)\n            }\n        })\n        if (zero_discount_items.length > 0) {\n            frappe.warn(`Possible Wrong Discounts in items`, zero_discount_items.join('\\r\\n'))\n        }\n    },\n    after_save(frm) {\n        if (!frm.doc.shipping_address_name) {\n            frm.set_value(\"shipping_address_name\", frm.doc.customer_address)\n            frm.refresh_field(\"shipping_address_name\")\n        }\n    //    frm.set_value('so_number', '')\n    },\n    before_submit(frm){\n     frm.set_value('submission_date', frappe.datetime.now_date())\n    },\n    customer_address(frm) {\n        frm.set_query(\"shipping_address_name\", () => {\n            return {\n                filters: {\n                }\n            }\n        });\n    },\n    customer(frm) {\n        let customer = frm.doc.customer\n        frappe.db.get_doc(\"Customer\", customer).then(doc => {\n            frappe.db.get_doc(\"Customer Group\", doc.customer_group).then(doc => { frm.set_value('sales_person', doc.sales_person); console.log(doc.sales_person); frm.refresh_field('sales_person'); })\n        })\n        frm.set_query(\"shipping_address_name\", () => {\n            return {\n                filters: {\n                }\n            }\n        });\n    },\n    no_delivery_date(frm) {\n        console.log(frm.doc.no_delivery_date);\n        if (frm.doc.no_delivery_date) {\n            frm.set_value('delivery_date', frappe.datetime.year_end())\n        } else {\n            frm.set_value('delivery_date', '')\n        }\n    },\n    before_cancel(frm) {\n        var d = new frappe.ui.Dialog({\n            title: __('Reason for Cancellation'),\n            fields: [\n                {\n                    \"fieldname\": \"reason_for_cancellation\",\n                    \"fieldtype\": \"Text\",\n                    \"reqd\": 1,\n                }\n            ],\n            primary_action: function () {\n                var data = d.get_values();\n                frappe.call({\n                    method: \"frappe.desk.form.utils.add_comment\",\n                    args: {\n                        reference_doctype: frm.doctype,\n                        reference_name: frm.docname,\n                        content: __('Reason for Cancellation:') + ' ' + data.reason_for_cancellation,\n                        comment_email: frappe.session.user,\n                        comment_by: frappe.session.user_fullname\n                    },\n                    callback: function (r) {\n                        if (!r.exc) {\n                            d.hide();\n                        }\n                    }\n                });\n            }\n        });\n        d.show();\n    }\n})\nlet i = 0\n\nfunction copy_from_previous_row(frm, current_row, parentfield, fieldnames) {\n    var rows = frm.doc[parentfield];\n    if (rows.length === 1 || rows[0] === current_row) {return};\n    if (typeof fieldnames === \"string\") {\n        fieldnames = [fieldnames];\n    }\n    fieldnames.forEach(field => {\n        frappe.model.set_value(\n            current_row.doctype,\n            current_row.name,\n            field,\n            rows[current_row.idx - 2][field]\n        );\n    })\n}\n\nfrappe.ui.form.on(\"Sales Order Item\", {\n    items_add: function(frm, cdt, cdn) {\n        let current_row = locals[cdt][cdn]\n        if (!current_row.name_of_brand) {\n            copy_from_previous_row(frm, current_row, \"items\", [\"name_of_brand\"]);\n        }\n    },\n    qty: function(frm, cdt, cdn){\n        let current_row = locals[cdt][cdn]\n        console.l\n        if (!current_row.discount_amount) {\n            copy_from_previous_row(frm, current_row, \"items\", [\"discount_amount\"]);\n        }\n    },\n    plain_type: function (frm, cdt, cdn) {\n        var grid_row = frm.open_grid_row();\n        if (!grid_row) {\n            grid_row = frm.get_field(\"items\").grid.get_row(cdn)\n        }\n        if (grid_row.doc.box_type === \"Printed\") {\n            frappe.model.set_value(cdt, cdn, 'plain_type', '');\n            frappe.show_alert(\"Set Either - Printed Or Plain Type\")\n        }\n    },\n    \n    name_of_brand(frm, cdt, cdn) {\n        test(frm, cdt, cdn)\n    },\n    \n    item_code(frm, cdt, cdn) {\n        // fetchBrandAndSetBoxType(frm, cdt, cdn);\n        test(frm, cdt, cdn)\n    },\n    \n    box_type(frm, cdt, cdn) {\n        let box_type = locals[cdt][cdn].box_type\n        if(box_type == 'Plain'){box_type = 'Plain Box Type'}else{box_type = 'Brand'}\n    }\n\n});\n\nlet box = ''\nlet ltr = 0\nlet model = ''\n\nfunction fetchBrandAndSetBoxType(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    let item_code = row.item_code;\n\n    const url = `https://raplbaddi.com/api/resource/Item/${item_code}`;\n    frappe.db.get_value('Item', item_code, 'geyser_box_size')\n    .then(r => {frappe.db.get_value('Geyser Box Size', r.message.geyser_box_size)})\n    fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n            const { geyser_model, capacity } = data.data;\n            model = geyser_model\n            ltr = capacity\n            return frappe.db.get_value('Brand Plain Box Availability', {\n                box_particular: row.name_of_brand,\n                model: geyser_model,\n                capacity: capacity\n            }, ['box_type']);\n        })\n        .then((response) => {\n            const box_type = response.message && response.message.box_type;\n            let newBoxType;\n            if (box_type === 'Brand') {\n                newBoxType = 'Printed';\n            } else {\n                newBoxType = 'Plain';\n            }\n            frappe.model.set_value(cdt, cdn, 'box_type', newBoxType);\n            frm.refresh_field('items');\n        })\n}\n\nlet test = function(frm,cdt,cdn) {\n        const row = locals[cdt][cdn]\n        let item_code = row.item_code\n        let brand = row.name_of_brand\n        frappe.db.get_value('Item', {disabled: 0, name: item_code}, 'geyser_box_size')\n        .then(r => {\n            frappe.db.get_value('Geyser Box Size', r.message.geyser_box_size, ['capacity', 'model'])\n            .then(r => {\n                    model = r.message.model\n                    ltr = r.message.capacity\n                    console.log(model, ltr)\n                    frappe.db.get_list('Item', {\n                    fields: ['name'],\n                    filters: {\n                        item_group: 'Packing Boxes',\n                        capacity: r.message.capacity,\n                        geyser_model: r.message.model,\n                        brand: brand\n                    }\n                    }).then(records => {\n                        console.log(records.length)\n                        if(records.length == 1){\n                            box = records[0].name\n                            frappe.model.set_value(cdt,cdn,\"custom_box\", box);\n                            frm.refresh_field(\"custom_box\");\n                        } else {\n                            frappe.model.set_value(cdt, cdn, \"custom_box\", '')\n                            frm.refresh_field(\"custom_box\")\n                        }\n                    })\n                }\n            )\n        })\n\n}\n\nfunction reserve(frm) {\n    frappe.call({\n        method: 'raplbaddi.api.reserve_qty_of_so',\n        args: {\n            items: frm.doc.items,\n            reserve_type: 'reserve'\n        },\n        callback: (r) => {\n            if (!r.exc) {\n                frm.set_value('custom_status', 'Urgent');\n                frm.save('Update');\n            }\n        }\n    });\n}\n\nfunction unreserve(frm) {\n    frappe.call({\n        method: 'raplbaddi.api.reserve_qty_of_so',\n        args: {\n            items: frm.doc.items,\n            reserve_type: 'unreserve'\n        },\n        callback: (r) => {\n            if (!r.exc) {\n                frm.set_value('custom_status', 'Urgent');\n                frm.save('Update');\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Testing Entry",
  "enabled": 1,
  "modified": "2023-09-04 11:52:13.373858",
  "module": null,
  "name": "ITE",
  "script": "frappe.ui.form.on('Item Testing Entry', {\n    refresh(frm) {\n        fetch('https://graph.facebook.com/v16.0/101225586311926/messages', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json',\n            \"authorization\": 'Bearer EAATFAMMIZCN0BOZBrmRZA97mLjO1t1EdrG9U07MayTWo5hrONquM7vdWx62vT23PQk4gnQ5rgbkIBkS5vW23mLxYsZAbA3derql47o1iFKz769FLvrvUfNLoKcuPkB8xt2UM7PM00ZCRJraO12GGaaAeP1yd1icM8zCuGtLfZB1hLpefoxtOx01ZCuClgywBGZCtA2h75jL4fCun7mg5ZCUevCYH9qU4ZD'\n        },\n        body: JSON.stringify({\n            \"messaging_product\": \"whatsapp\",\n            \"recipient_type\": \"individual\",\n            \"to\": \"7888465211\",\n            \"type\": \"text\",\n            \"text\": {\"body\" : \"hi\"}\n        })\n        })\n        .then(r => r.json())\n        .then(r => {\n            console.log(r);\n        })\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Testing Report",
  "enabled": 1,
  "modified": "2023-09-06 14:16:22.192734",
  "module": null,
  "name": "Testing Api",
  "script": "frappe.ui.form.on('Testing Report', {\n\trefresh(frm) {\n\t\tfetch('https://raplbaddi.com/api/resource/Delivery%20Note/DN-23-00465', {\n        })\n        .then(r => r.json())\n        .then(r => {\n            console.log(r.data.items[0]);\n        })\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Daily Sales Report By Admin",
  "enabled": 0,
  "modified": "2023-10-21 15:27:38.944920",
  "module": "SalesRapl",
  "name": "DSRA",
  "script": "frappe.ui.form.on('Daily Sales Report By Admin', {\n    onload(frm){\n        frappe.call(\n            {\n                method: 'raplbaddi.api.po_office_query',\n                callback: (r) => {\n                    console.log(r)\n                }\n            }    \n        )\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2023-10-19 17:23:50.811942",
  "module": "Stock Rapl",
  "name": "Delivery Note List View",
  "script": "frappe.listview_settings['Delivery Note'] = {\n    onload: function(listview) {\n        if (frappe.user.has_role('Dispatch Bill')) {\n            frappe.route_options = {\n                'posting_date': ['=', frappe.datetime.now_date()],\n                'docstatus': ['=', 1]\n            }\n        }\n        if (frappe.user.has_role('Payment Auditor')) {\n            frappe.route_options = {\n                'posting_date': ['=', frappe.datetime.now_date()],\n                'docstatus': ['=', 1],\n                'customer' : ['=', 'Cash/Other']\n            }\n        }\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Receipt Note",
  "enabled": 1,
  "modified": "2023-09-22 12:11:29.031327",
  "module": null,
  "name": "Material Receipt Note",
  "script": "frappe.ui.form.on('Material Receipt Note', {\n    before_save(frm){\n        if(frm.doc.supplier_invoice_number){\n            frm.set_value('supplier_invoice_number', frm.doc.supplier_invoice_number.toUpperCase())\n            frm.refresh_field('supplier_invoce_number')\n        }\n        $.each(frm.doc.items || [], function (i, v) {\n    \t    if(v.received_qty != v.supplier_qty)  {\n                let shortage = v.received_qty - v.supplier_qty\n                frappe.model.set_value(v.doctype, v.name, \"shortage_qty\", shortage)\n    \t    } else {\n    \t        frappe.model.set_value(v.doctype, v.name, \"shortage_qty\", 0)\n    \t    }\n        }\n\t)},\n\t\n    before_submit(frm){\n        if(!(frm.doc.supplier || frm.doc.customer)){\n            frappe.throw('Kindly Add Supplier')\n        }\n    },\n\tcopy(frm) {\n    frappe.show_alert('Copied', );          \n    const { account_holder_name, amount, gpay_phonepe_paytm, account_number, ifsc_code, party_name } = frm.doc;\n    const fieldMapping = {\n      supplier: '*Supplier*',\n      date: 'Date',\n      ite\n    };\n\n    const data = Object.entries(fieldMapping)\n      .filter(([field]) => !!frm.doc[field])\n      .map(([field, label]) => `${label}: ${frm.doc[field]}`);\n\n    if (data.length > 0) {\n      navigator.clipboard.writeText(data.join('\\n')).then((r) => {\n      });\n    } else {\n      frappe.msgprint('No data to copy', 'Details');\n    }\n  },\n})\n\n\n\nfrappe.ui.form.on('Material Receipt Note Item', {\n\treceived_qty(frm, cdt, cdn) {\n\t    let row = locals[cdt][cdn]\n\t\tfrappe.model.set_value(cdt, cdn, \"supplier_qty\", row.received_qty)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Daily Sales Report By Admin",
  "enabled": 1,
  "modified": "2023-09-15 10:41:45.671597",
  "module": "Stock Rapl",
  "name": "DSRA List View",
  "script": "frappe.listview_settings['Daily Sales Report By Admin'] = {\n    onload: function(listview) {\n        if (frappe.session.user == 'kuldeepbaddi@gmail.com') {\n            var yesterday = new Date();\n            yesterday.setDate(yesterday.getDate() - 1);\n\n            frappe.route_options = {\n                'date': ['=', yesterday],\n                'docstatus': ['=', 1]\n            };\n        }\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Receipt Note",
  "enabled": 1,
  "modified": "2023-09-16 12:47:00.082431",
  "module": "Stock Rapl",
  "name": "Material Receipt Note List View",
  "script": "frappe.listview_settings['Material Receipt Note'] = {\n    onload: function(listview) {\n            frappe.route_options = {\n                'date': ['=', frappe.datetime.now_date()],\n                'docstatus': ['in', [1, 0]]\n            };\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2023-10-23 15:18:39.274767",
  "module": null,
  "name": "Material Request",
  "script": "frappe.ui.form.on('Material Request', {\n    hold(frm){\n      frm.set_value(\"custom_status\", \"Stopped\")\n      frm.save('Update')\n    },\n    onload_post_render(frm) {\n        frm.set_query(\"item_code\", \"items\", (doc, cdt, cdn) => {\n            let row = locals[cdt][cdn];\n            return {\n                filters: {\n                    'item_group': frm.doc.item_group\n                }\n            }\n        })\n\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2023-09-19 17:17:28.675552",
  "module": null,
  "name": "Tem CG",
  "script": "frappe.ui.form.on('Customer', {\n\tonload(frm) {\n\t\tfrm.set_value('customer_group', 'Confusion in Salesmen')\n\t\tfrm.refresh_field('customer_group')\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2023-10-21 09:56:11.498390",
  "module": null,
  "name": "Purchase Order",
  "script": "const boxSupplier = {\n    'Jai Ambey Industries': {\n        user: 'testboxsupplier@gmail.com',\n        home: 'Jai Ambey Industries - RAPL',\n        away: 'Packing Boxes - RAPL'\n    }    \n}   \n\nlet based_on_material_request = ''\nfrappe.ui.form.on('Purchase Order', {\n    based_on_material_request: function(frm, cdt, cdn) {\n        based_on_material_request = frm.doc.based_on_material_request\n        if(!frm.doc.items[frm.doc.items.length - 1].item_code) {\n            frm.doc.items.pop()\n            frm.refresh_field('items')\n        }\n        if (based_on_material_request) {\n            frm.fields_dict['items'].grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\n                return {\n                    query: \"raplbaddi.api.get_mr_query\",\n                    filters: [[\"supplier\", \"=\", frm.doc.supplier], [\"docstatus\", \"=\", 1], [\"status\", \"!=\", \"Stopped\"]],\n                    searchfield: 'item_code'\n                };\n            };\n        } else {\n            if(frm.doc.items[frm.doc.items.length - 1].item_code === '') {\n                frm.doc.items.pop()\n                frm.refresh_field('items')\n            }\n                frm.fields_dict['items'].grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\n                return {\n                    query: \"erpnext.controllers.queries.item_query\"\n                };\n            };\n        }\n    },\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) {\n        let showOriginalOrder = true;\n        frm.add_custom_button(showOriginalOrder ? 'Original Order' : 'Remaining Order', function () {\n            $.each(frm.doc.items || [], function (i, v) {\n                if (v.qty <= v.received_qty || v.closed) {\n                    const item = $(`[data-idx='${i + 1}']`);\n                    if (showOriginalOrder) {\n                        item.hide();\n                    } else {\n                        item.show();\n                    }\n                }\n            });\n            showOriginalOrder = !showOriginalOrder;\n        });\n        }\n    },\n    before_save(frm) {\n        let supplier = frm.doc.supplier;\n        if (supplier in boxSupplier) {\n            $.each(frm.doc.items || [], function (i, v) {\n                frappe.model.set_value(v.doctype, v.name, \"warehouse\", boxSupplier[supplier].away);\n                frappe.model.set_value(v.doctype, v.name, \"from_warehouse\", boxSupplier[supplier].home);\n                if (v.qty < v.received_qty) {\n                    console.log($([]))\n                    $([]).hide();\n                }\n                frm.refresh_field(\"items\");\n            });\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Order Item', {\n    item_code(frm, cdt, cdn) {\n        if (frm.doc.based_on_material_request) {\n            let row = locals[cdt][cdn];\n            frappe.call({\n                method: \"raplbaddi.api.get_mr\",\n                args: {\n                    item_code: row.item_code\n                },\n                callback: (responses) => {\n                    responses.message.forEach(response => {\n                        let new_item = frm.add_child('items');\n                        new_item.item_code = row.item_code;\n                        new_item.uom = 'Nos';\n                        new_item.item_name = row.item_code;\n                        new_item.description = row.item_code;\n                        new_item.material_request_item = response.material_request_item;\n                        new_item.material_request = response.material_request;\n                        new_item.qty = response.remaining_for_order_qty;\n                    });\n                    frm.get_field('items').grid.grid_rows_by_docname[cdn].remove();\n                    frm.refresh_field('items');\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Plain Box Type",
  "enabled": 1,
  "modified": "2023-10-03 14:47:22.308451",
  "module": "Stock Rapl",
  "name": "Plain Box Type",
  "script": "frappe.ui.form.on('Plain Box Type', {\n\tadd_supplier(frm) {\n\t\tfrm.doc.paper_names.forEach(i => {\n\t\t\tfrm.add_child('priority_and_rates', { 'supplier': frm.doc.supplier, 'priority': frm.doc.paper_name, 'paper_name': i.title, 'priority': frm.doc.priority})\n\t\t})\n\t\tfrm.refresh_field('priority_and_rates')\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2023-10-12 18:29:30.945829",
  "module": "Stock Rapl",
  "name": "Purchase Order List View",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    onload: function(listview) {\n            frappe.route_options = {\n              \"per_received\": [\"<\", 100],\n              \"status\": [\"!=\", \"Closed\"],\n              \"docstatus\": [\"!=\", 2]\n            }\n    }\n};\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2023-10-19 14:34:26.735004",
  "module": "Stock Rapl",
  "name": "Purchase Receipt",
  "script": "let based_on_purchase_order = ''\nfrappe.ui.form.on('Purchase Receipt', {\n    based_on_purchase_order: function(frm, cdt, cdn) {\n        based_on_purchase_order = frm.doc.based_on_purchase_order\n        if(!frm.doc.items[frm.doc.items.length - 1].item_code) {\n            frm.doc.items.pop()\n            frm.refresh_field('items')\n        }\n        if (based_on_purchase_order) {\n            frm.fields_dict['items'].grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\n                console.log('heheh')\n                return {\n                    query: \"raplbaddi.api.get_poi_query\",\n                    filters: [[\"supplier\", \"=\", frm.doc.supplier], [\"docstatus\", \"=\", 1], [\"status\", \"!=\", \"Closed\"]],\n                    searchfield: 'item_code'\n                };\n            };\n        } else {\n            if(frm.doc.items[frm.doc.items.length - 1].item_code === '') {\n                frm.doc.items.pop()\n                frm.refresh_field('items')\n            }\n                frm.fields_dict['items'].grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\n                return {\n                    query: \"erpnext.controllers.queries.item_query\"\n                };\n            };\n        }\n    },\n\trefresh(frm) {\n\t    if(frm.supplier){\n\t\t    frm.set_value('supplier', frm.supplier)\n\t    }\n\t}\n})\n\n\n\nfrappe.ui.form.on('Purchase Receipt Item', {\n\titem_code(frm, cdt, cdn) {\n     if (frm.doc.based_on_purchase_order) {\n\t    let row = locals[cdt][cdn]\n\t\tfrappe.call({\n\t\t    method: \"raplbaddi.api.get_poi\",\n\t\t    args: {\n\t\t        item_code: row.item_code\n\t\t    },\n\t\t    callback: (responses) => {\n\t\t        responses.message.forEach(response => {\n                    let new_item = frm.add_child('items');\n                    new_item.item_code = row.item_code;\n                    new_item.uom = 'Nos';\n                    new_item.item_name = row.item_code;\n                    new_item.description = row.item_code;\n\t\t            new_item.purchase_order_item = response.purchase_order_item\n\t\t            new_item.purchase_order = response.purchase_order\n\t\t            new_item.material_request_item = response.material_request_item\n\t\t            new_item.material_request = response.material_request\n\t\t            new_item.qty = response.remaining_qty\n\t\t        })\n                frm.get_field('items').grid.grid_rows_by_docname[cdn].remove();\n                frm.refresh_field('items');\n\t\t    }\n\t\t}\n\t )\n\t}}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2023-10-23 15:19:39.293222",
  "module": "Stock Rapl",
  "name": "Material Request List View",
  "script": "frappe.listview_settings['Material Request'] = {\n    onload: function(listview) {\n            frappe.route_options = {\n              \"per_received\": [\"<\", 100],\n              \"status\": [\"!=\", \"Stopped\"],\n              \"docstatus\": [\"!=\", 2],\n              \"custom_status\": [\"!=\", \"Stopped\"]\n            }\n    }\n};\n",
  "view": "List"
 }
]